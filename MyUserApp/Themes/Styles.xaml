<!-- ==================================================================================================== -->
<!-- ==                                                                                                == -->
<!-- ==   MASTER STYLES DICTIONARY                                                                     == -->
<!-- ==   This file defines the fundamental appearance of all common WPF controls.                     == -->
<!-- ==   It is designed to be "theme-agnostic," meaning it defines the structure, templates,          == -->
<!-- ==   and visual states (like hover effects), but all color information is sourced from            == -->
<!-- ==   DynamicResource bindings. This allows a theme file (like DarkTheme.xaml) to be swapped in,   == -->
<!-- ==   providing a new set of brushes that completely changes the application's look and feel       == -->
<!-- ==   without altering the control structures defined here.                                        == -->
<!-- ==                                                                                                == -->
<!-- ==================================================================================================== -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- =================================================================== -->
    <!-- ==                     IMPLICIT BASE STYLES                      == -->
    <!-- =================================================================== -->
    <!-- These styles have no x:Key, so they are implicitly applied to ALL controls of their TargetType -->
    <!-- throughout the application. They establish a consistent baseline. -->

    <Style TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>

    <Style TargetType="Border">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <!-- =================================================================== -->
    <!-- ==                        BUTTON STYLES                          == -->
    <!-- =================================================================== -->

    <!-- A base style that defines the common template and triggers for all buttons. -->
    <!-- By creating a base style, we avoid duplicating the ControlTemplate and triggers for every button variant. -->
    <Style x:Key="BaseButtonStyle" TargetType="Button">
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <!-- The ControlTemplate completely replaces the default Windows look-and-feel of a Button. -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!-- The main border defines the button's shape and appearance. Its properties are bound to the Button's properties. -->
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3">
            <!-- This presenter displays whatever content is placed inside the Button tags (e.g., text or an icon). -->
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
            </Border>
            <!-- Triggers handle visual feedback for different states. -->
            <ControlTemplate.Triggers>
                <!-- When the user hovers the mouse over the button, change the background. -->
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlHoverBrush}"/>
                </Trigger>
                <!-- When the user clicks the button, change the background. -->
                <Trigger Property="IsPressed" Value="True">
                    <Setter TargetName="border" Property="Background" Value="{DynamicResource ControlPressedBrush}"/>
                </Trigger>
                <!-- When the button is disabled, make it semi-transparent. -->
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value="0.5"/>
                </Trigger>
            </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- The primary action button style, with a prominent accent color background. It inherits from the BaseButtonStyle. -->
    <Style x:Key="PrimaryActionButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource PrimaryAccentBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryAccentBrush}"/>
        <Setter Property="Foreground" Value="#FFFFFF"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
    </Style>

    <!-- By setting this style with no x:Key, we make PrimaryActionButtonStyle the DEFAULT style for all Buttons. -->
    <Style TargetType="Button" BasedOn="{StaticResource PrimaryActionButtonStyle}"/>

    <!-- A less prominent button style for secondary actions (e.g., "Cancel"). It inherits from the BaseButtonStyle. -->
    <Style x:Key="SecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    </Style>

    <!-- A special button style for the "Save" button in the Image Editor. -->
    <!-- It uses a DataTrigger to change its appearance and content based on the ViewModel's IsDirty property. -->
    <Style x:Key="SaveButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimaryActionButtonStyle}">
        <!-- Default state: green "Saved" button when there are no changes. -->
        <Setter Property="Background" Value="{DynamicResource SuccessBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource SuccessBrush}"/>
        <Setter Property="Content" Value="Saved"/>
        <Style.Triggers>
            <!-- When the ViewModel's IsDirty property is True, the button becomes an orange "Save" call to action. -->
            <DataTrigger Binding="{Binding IsDirty}" Value="True">
                <Setter Property="Background" Value="{DynamicResource WarningBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource WarningBrush}"/>
                <Setter Property="Content" Value="Save"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- A style for buttons that only contain an icon, used in toolbars for a clean, minimal look. -->
    <Style x:Key="IconButtonToolBarStyle" TargetType="Button" BasedOn="{StaticResource BaseButtonStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Width" Value="32"/>
        <Setter Property="Height" Value="32"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ==                      INPUT CONTROL STYLES                     == -->
    <!-- =================================================================== -->

    <Style TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="PasswordBox">
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
    </Style>

    <!-- A custom template for the dropdown arrow button part of a ComboBox. -->
    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border Grid.ColumnSpan="2" CornerRadius="3"
                    Background="{DynamicResource ControlBackgroundBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="1" />
            <Path x:Name="Arrow" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z" Fill="{DynamicResource GlyphBrush}" />
        </Grid>
    </ControlTemplate>

    <!-- The main style for ComboBox, which replaces its entire default template. -->
    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <!-- The dropdown button, using our custom template. -->
                        <ToggleButton x:Name="ToggleButton" 
                                      Template="{StaticResource ComboBoxToggleButtonTemplate}" 
                                      Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"/>
                        <!-- The area where the selected item is displayed. -->
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False"  
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left" />
                        <!-- The popup that appears when the dropdown is open. -->
                        <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
                            <Grid Name="DropDown" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder" Background="{DynamicResource SecondaryBackgroundBrush}" BorderThickness="1" BorderBrush="{DynamicResource BorderBrush}"/>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <!-- This StackPanel is where the ComboBoxItems will be placed. -->
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ToggleButton" Property="Background" Value="{DynamicResource ControlHoverBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the individual items *inside* a ComboBox's dropdown list. -->
    <Style TargetType="ComboBoxItem">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource ControlHoverBrush}"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"/>
                <Setter Property="Foreground" Value="#FFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- =================================================================== -->
    <!-- ==                    LAYOUT CONTROL STYLES                      == -->
    <!-- =================================================================== -->

    <Style TargetType="TabControl">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <!-- Custom template for TabItem to give it a modern, integrated look. -->
    <Style TargetType="TabItem">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="1,1,1,0"
                            Background="{TemplateBinding Background}"
                            Margin="0,0,-1,0"
                            CornerRadius="3,3,0,0">
                        <ContentPresenter ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!-- When a tab is selected, it visually merges with the main content area. -->
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource PrimaryBackgroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="GroupBox">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource SecondaryTextBrush}"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="Margin" Value="0,5,0,5"/>
    </Style>

        <Style TargetType="Expander">
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Margin" Value="0,0,0,5"/>
        </Style>

        <!-- =================================================================== -->
        <!-- ==                       DATAGRID STYLES                         == -->
        <!-- =================================================================== -->

        <Style TargetType="DataGrid">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource BorderBrush}"/>
            <!-- Defines the background for odd-numbered rows. -->
            <Setter Property="AlternatingRowBackground" Value="{DynamicResource ControlBackgroundBrush}"/>
        </Style>

        <Style TargetType="DataGridColumnHeader">
            <Setter Property="Background" Value="{DynamicResource SecondaryBackgroundBrush}"/>
            <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}"/>
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
            <Setter Property="BorderThickness" Value="0,0,1,1"/>
            <Setter Property="Padding" Value="5"/>
        </Style>

        <Style TargetType="DataGridRow">
            <Setter Property="Background" Value="Transparent"/>
            <!-- Disables the default red border for validation errors. -->
            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{DynamicResource ControlHoverBrush}"/>
                </Trigger>
                <Trigger Property="IsSelected" Value="True">
                    <Setter Property="Background" Value="{DynamicResource SecondaryAccentBrush}"/>
                    <Setter Property="Foreground" Value="#FFFFFF"/>
                </Trigger>
            </Style.Triggers>
        </Style>

</ResourceDictionary> 